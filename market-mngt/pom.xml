<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>ccx-market</artifactId>
        <groupId>com.ccx.market</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>market-mngt</artifactId>


    <dependencies>
        <!--web 模块-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!--排除tomcat依赖-->
                <exclusion>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--undertow容器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- 调试 热启动 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>

        <!--数据库-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>

        <dependency>
            <groupId>com.ccx.market</groupId>
            <artifactId>common-security</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.ccx.market</groupId>
            <artifactId>common-wrapper</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <archive>
                        <!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
                        <addMavenDescriptor>true</addMavenDescriptor>
                        <!-- 生成MANIFEST.MF的设置 -->
                        <manifest>
                            <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                            下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                            此时会在classpath下面把那个带时间戳的给添加上去，然后我们
                            在依赖打包的时候，打的是正确的，所以两头会对不上，报错。-->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                            <addClasspath>true</addClasspath>
                            <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个
                            jar本身和依赖包在同一级目录，则不需要添加-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- jar启动入口类-->
                            <mainClass>com.ccx.mngt.MarketMngtApplication</mainClass>
                        </manifest>
                        <!--<manifestEntries>-->
                        <!-- 在Class-Path下添加配置文件的路径 -->
                        <!--<Class-Path>../config/</Class-Path>-->
                        <!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
                        这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
                        文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
                        所有jar都在lib下，资源文件都在config下，lib和config是同级的 -->
                        <!-- 同时还需要注意另外一个问题，假如你的pom文件里面配置了
                        <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
                        这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
                        这个地方，用空格隔开就行-->
                        <!--</manifestEntries>-->
                    </archive>
                    <!-- jar包的位置-->
                    <!--<outputDirectory>${project.build.directory}/lib</outputDirectory>-->
                    <!--<includes>-->
                    <!-- 打jar包时，只打包class文件 -->
                    <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等-->
                    <!--<include>**/*.class</include>-->
                    <!--</includes>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.9.RELEASE</version>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <mainClass>com.ccx.mngt.MarketMngtApplication</mainClass>
                    <!-- 如果不设置fork,那么不会restart,devtools热部署不会起作用-->
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>